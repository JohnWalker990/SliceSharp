// <auto-generated/>
using System.Collections.Generic;
using Microsoft.CodeAnalysis;

namespace SliceSharp.Cli
{
    /// <summary>
    /// Represents a dependency graph of symbols and the documents containing them.
    /// </summary>
    internal sealed class DependencyGraph
    {
        #region PUBLIC-PROPERTIES
        /// <summary>
        /// All discovered symbols (methods, types) in BFS order.
        /// </summary>
        public List<ISymbol> Symbols { get; } = new();

        /// <summary>
        /// Directed edges (from -> to) between symbols.
        /// </summary>
        public List<(ISymbol From, ISymbol To)> Edges { get; } = new();

        /// <summary>
        /// Documents in order of appearance (used for export).
        /// </summary>
        public List<Document> Documents { get; } = new();

        /// <summary>
        /// Symbol to document map.
        /// </summary>
        public Dictionary<ISymbol, Document> SymbolDocuments { get; } = new(SymbolEqualityComparer.Default);
        #endregion

        #region PUBLIC-METHODS
        /// <summary>
        /// Adds a symbol and its document if not already present.
        /// </summary>
        public void Add(ISymbol symbol, Document doc)
        {
            if (!Symbols.Contains(symbol, SymbolEqualityComparer.Default))
                Symbols.Add(symbol);
            if (!SymbolDocuments.ContainsKey(symbol))
                SymbolDocuments[symbol] = doc;
            if (!Documents.Contains(doc))
                Documents.Add(doc);
        }

        /// <summary>
        /// Adds a directed edge (from -> to).
        /// </summary>
        public void AddEdge(ISymbol from, ISymbol to)
        {
            Edges.Add((from, to));
        }
        #endregion
    }
}
