// <auto-generated/>
using System.Collections.Generic;
using Microsoft.CodeAnalysis;

namespace SliceSharp.Cli
{
    /// <summary>
    /// DI registry mapping interfaces to implementation types.
    /// </summary>
    internal sealed class DiRegistry
    {
        #region PRIVATE-FIELDS
        private readonly Dictionary<INamedTypeSymbol, List<INamedTypeSymbol>> _map = new(SymbolEqualityComparer.Default);
        #endregion

        #region PUBLIC-METHODS
        /// <summary>
        /// Adds a mapping from service interface to concrete implementation.
        /// </summary>
        public void Add(INamedTypeSymbol service, INamedTypeSymbol implementation)
        {
            if (!_map.TryGetValue(service, out var list))
            {
                list = new List<INamedTypeSymbol>();
                _map[service] = list;
            }
            if (!list.Contains(implementation, SymbolEqualityComparer.Default))
                list.Add(implementation);
        }

        /// <summary>
        /// Returns the best known implementation(s) for a given service interface.
        /// </summary>
        public IReadOnlyList<INamedTypeSymbol> GetImplementations(INamedTypeSymbol service)
        {
            if (_map.TryGetValue(service, out var list)) return list;
            return System.Array.Empty<INamedTypeSymbol>();
        }

        /// <summary>
        /// Gets all mappings (for diagnostics/export).
        /// </summary>
        public IReadOnlyDictionary<INamedTypeSymbol, List<INamedTypeSymbol>> GetAllMappings() => _map;
        #endregion
    }
}
